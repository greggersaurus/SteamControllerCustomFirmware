// Data obtained from simulation run of vcf_wired_controller_d0g_57bf5c10.bin using pinkySim:

volatile uint32_t* reg = NULL;
uint32_t val = 0;

// CSV ENTRY NUM 0 - 7:

// Writing some values to SRAM0. push data onto stack? (not important?)


// CSV ENTRY NUM 8 - 23:

// Power Configuration Register
reg = 0x40048238;
// Read current value
val = *reg;
// Clear reserved bit that must stay cleared
val &= 0x000005ff;
// Make sure crystal oscillator is powered
val &= ~(0x00000020);
// Reserved bits that must always be set
val |= 0xe800;
*reg = val;


// CSV ENTRY NUM 24 - 45085:
// Some sort of delay required after last system control register mod?
for (uint32_t cnt = 0; cnt < 0x1600; cnt++)
{
	nop;
}


// CSV ENTRY NUM 45086 - 45099:

// Select Crystal Oscillator (SYSOSC)
reg = 0x40048040;
*reg = 1;

// Enable system PLL clock source update
reg = 0x40048044;
*reg = 0;
*reg = 1;


// CSV ENTRY NUM 45100 - 45114:

// Power Configuration Register
reg = 0x40048238;
// Read current value
val = *reg;
// Clear reserved bit that must stay cleared
val &= 0x5ff;
// Make sure system PLL is powered down
val |= 0x80;
// Reserved bits that must always be set
val |= 0xe800;
*reg = val;


// CSV ENTRY NUM 45115 - 45121:

// System PLL control register
reg = 0x40048008;
// Division ratio = 2 x 4. Feedback divider value = 3 + 1.
*reg = 0x23;


// CSV ENTRY NUM 45122 - 45136:

// Power configuration register
reg = 0x40048238;
val = *reg;
// Clear reserved bit that must stay cleared
val &= 0x5ff;
// Make sure system PLL powered
val &= ~0x80;
// Reserved bits that must always be set
val |= 0xe800;
*reg = val;


// CSV ENTRY NUM 45137 - 45143:

// System PLL status register
reg = 0x4004800c;
// Wait until PLL is locked
while(((*reg) & 1) == 0);


// CSV ENTRY NUM 45144 - 45149:

// System clock divider register
reg = 0x40048078;
// Set system AHB clock divider to 1.
*reg = 1;


// CSV ENTRY NUM 45150 - 45159:

// Flash configuration register
reg = 0x4003c010;
val = *reg;
// Bits 31:2 must be written back exactly as read
val &= 0xFFFFFFC0;
// Set flash access time to 3 system clocks (for system clock up to 50 MHz)
val |=  2;
*reg = val;


// CSV ENTRY NUM 45160 - 45171:

// Main clock source select register
reg = 0x40048070;
// Select PLL output
*reg = 3;

// Main clock source update enable register
reg = 0x40048074;
// No change
*reg = 0;
// Update clock source
*reg = 1;


// CSV ENTRY NUM 45172 - 45184:

// USB PLL clock source select register
reg = 0x40048048;
// Select system oscillator
*reg = 1;

// USB PLL clock source update enable register
reg = 0x4004804c;
// No change
*reg = 0;
// Update clock source.
*reg = 1;


// CSV ENTRY NUM 45185 - 45187:

// USB PLL control register
reg = 0x40048010;
// Division ration is 2 x 4. Feedback divider value is 3 + 1.
*reg = 0x23;


// CSV ENTRY NUM 45188 - 45204:

// Power Configuration Register
reg = 0x40048238;
val = *reg;
// Clear reserved bit that must stay cleared
val &= 0x5ff;
// Set USB PLL and USB transceiver to powered
val &= ~0x500;
// Reserved bits that must always be set
val |= 0xe800;
*reg = val;


// CSV ENTRY NUM 45205 - 45211:

// USB PLL status register
reg = 0x40048014;
// Wait for PLL locked
while (((*reg) & 1) == 0);


// CSV ENTRY NUM 45212 - 45221:

// System clock control register
reg = 0x40048080;
val = *reg;
// Enable I/O configuration block
val |= 0x10000;
*reg = val;


// CSV ENTRY NUM 45222 - 45441:

// Section of SRAM0 (0x10000200 - 0x10000260) is getting filled with specific data (not important?)

/*
	0x00000000
	0x00002000
	0x00220209
	0x80000101
	0x00040932
	0x00030100
	0x21090000
	0x01000111
	0x07002122
	0x40038105
	0x00000600
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
	0x00000000
*/


// CSV ENTRY NUM 45442 - 53680
// Clear a section of SRAM0 from 0x10000264 to 0x10001c1c. 6588 4 byte writes. (Continuation of previous not important?)


// CSV ENTRY NUM 53681 - 53707:

// Fill in tail end of SRAM0 block cleared above (not important?)
/*
	0x10001c08 = 0x00000000
	0x10001c0c = 0x0000153d
	0x10001c10 = 0x0000185c
	0x10001c14 = 0x00000001
	0x10001c18 = 0x0000185c
	0x10001c1c = 0x000003d1
	0x10001c00 = 0x0000185c
	0x10001c04 = 0x00001553
	0x10001bf8 = 0x0000185c
	0x10001bfc = 0x00000fd7
	0x10001bf0 = 0x0000185c
	0x10001bf4 = 0x0000049b
*/


// CSV ENTRY NUM 53708 - 53721:

// Read "Main clock source select register" (0x40048070) and check value of lower 2 bits? (verify PLL output is set?)


// CSV ENTRY NUM 53722 - 53725:

// Push some values onto the stack (not important?)


// CSV ENTRY NUM 53726 - 53735:

// Read "System PLL clock source select register" (0x40048040) and verify Crystal Oscillator is set?


// CSV ENTRY NUM 53736 - 53758:

// Read "System PLL control register" 0x40048008 and verify settings?
// Also other SRAM0 accesses that I can't see a purpose to.


// CSV ENTRY NUM 53759 - 53762:

// Read "System clock divider register" 0x40048078 and verify?


// CSV ENTRY NUM 53763 - 54162:

// Whole bunch of SRAM0 and register math. Prep for Boot ROM access? (Not important?)


// CSV ENTRY NUM 54163 - ...:

// Jump to 0x1fff1ff1 Boot ROM code for TBD reason
